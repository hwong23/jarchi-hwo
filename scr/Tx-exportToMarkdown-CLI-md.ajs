/*
 * Export View to Markdown
 *
 * Requires jArchi - https://www.archimatetool.com/blog/2018/07/02/jarchi/
 *
 * Markdown - https://www.markdownguide.org/
 *
 * Version 2:   Updated to support Diagram Groups
 * Version 2.1: Add check for Selected View
 * Version 2.2: Change to regex, added date of export
 * Version 2.3: Include notes in documentation
 * Version 3:   Updated to include Relationships
 * Version 3.1: Include name and description
 * Version 3.2: Support repeated elements
 * Version 3.3: Fix for relationships table
 * Version 3.4: Fix for connected notes,
 *              Quotes in documentation,
 *              Embed view (experimental)
 * Version 3.5: Added support for jArchi 4.4 (additional attributes)
 * Version 3.6: Linea de comando (CLI)
 * Version 3.7: Argumento theRutaMacMD
 * Version 4.2: Referencia imagen URL
 * Version 4.2.1: Argumento rutaCompleta
 * Version 4.3: Funciones de librería devdoc
 * Version 4.3.1: Funciones de librería devdoc extendida
 * Version 4.4.0: inclusionsettings para elementos sin documentación
 * Version 4.4.2: Nueva exportar imagen/rutaTrabajo
 * 
 * (c) 2018 Steven Mileham, HWO
 *
 */

load(__DIR__ + "lib/myargs.js");
load(__DIR__ + "lib/devdocslib.js");


var debug = false;
var embed = false;
var tocMap = [];
var bodyMap = [];
var proptable = false;            // escribe tabla de propiedades?
var reltable = false;             // escribe tabla de relaciones?
var g_path = "";
var g_fileName = "";              // ruta+archivo de salida
var g_drivingView_devdoc = "";    // documento automático asociado a g_drivingView
var g_theDocument = "";
var theTOC = "* [Introducción](#Introducción)";


console.show();
console.clear();
console.log("Export to Markdown");


/*
devdoc::documentación de los elementos de una vista
    d: nivel de identación títulos
    element: argumento vista
 Requiere: 
 */
function nestedDocumentation_elements(d, view, inclusionsettings = null) {
    debug? console.log('Elementos: '):true;

    $(view).children().not("relationship").filter(function(child) {
        var prop_destino = child.prop("destino");
        return (prop_destino? (prop_destino.includes("doc")? true:false): false)
    }).each(function(e) 
    {
        if (e.name) {
            var headerDepth ="##";      // nivel inicial jerarquía del título
            for (var i=0; i<d; i++) {
                headerDepth+="#";
            }

            // var theHash = devdoc_generateLink(e.name +" ("+ devdoc_convertToText(e.type)+")");
            // if (bodyMap[theHash]==null) {
            //     bodyMap[theHash]=1;
            // }
            // else {
            //     bodyMap[theHash]+=1;
            // }

            // var linkNum="";

            // if (bodyMap[theHash]>1) {
            //     linkNum = " "+bodyMap[theHash];
            // }

            if (e.documentation ||          // si elemento con documentación
                                            // si elemento sin documentación permitido
                (!e.documentation && inclusionsettings.IncluyeElementosSindoc) ||
                $(e).children().length>0)   // si elemento es un grupo
            {    
                g_theDocument+="\n"+headerDepth +" "+ (e.name) /*+"("+ convertToText(e.type) +")"*/ + /*linkNum*/ "\n";
                (e.prop().length > 0 && proptable) ? g_theDocument+="\n" +(devdoc_propertiesTable(e)):true;
                ($(e).outRels().length>0 && reltable) ? g_theDocument+="\n"+(devdoc_documentRelationships(e)):true;
                e.documentation ? g_theDocument+="\n"+/*escapeMD*/(e.documentation)+"\n":true;
            }
            // tabla de relaciones
            $(e).rels().ends().each(function(r) {
                if (r.text) {
                    g_theDocument+="\n> "+devdoc_escapeMD(r.text).replaceAll("\n","\n> ")+"\n";
                }
            });
        
            debug? console.log('   '+e.name+":"+e):true;
            
            // el elemento es contenedor
            if ($(e).children().length>0) {
                d++;
                nestedDocumentation_elements(d, e, inclusionsettings);
                d--;
            }
        } // if (e.name)
    });
}


// Argumentos de entrada por CLI
var argRutaSalida = myargs_getArgumento("rutaMacMD");
var argVistaDocumental = myargs_getArgumento("vistaDocumental");
var argRutaCompleta = myargs_getArgumento("rutaCompleta");
console.log("Entradas: ")
console.log("   theRutaMacMD: "+argRutaSalida);
console.log("   vistaDocumental: "+argVistaDocumental);
console.log("   rutaCompleta: "+argRutaCompleta);


// Selección de la vista indicada por el argumento entrada CLI
// $(selection).filter("archimate-diagram-model").first();
var g_drivingView = devdoc_useDrivingView(argVistaDocumental);


if (g_drivingView) {
    // Define ruta/nombre del archivo de salida de la documentación de la vista theView
    // var defaultFileName = theView.name ? model.name + "-" + theView.name + ".md" : "Exported View.md"; // Default file name
    // var exportFile = window.promptSaveFile({ title: "Export to Markdown", filterExtensions: [ "*.md" ], fileName: defaultFileName } );
    var archivoruta = rutaTrabajo(g_drivingView, argRutaMacMD);
    g_drivingView_devdoc = archivoruta.devdoc;
    g_fileName = archivoruta.filename;
    g_path = archivoruta.path
    console.log("path: ", g_path);
    console.log("fileName: ", g_fileName);
    (debug)?console.log('exportFile: '+exportFile):true;

    
    // configuración de presentación de la vista seleccionada
    var drivingViewInclusionSettings = devdoc_getGroupInclusionSettings(g_drivingView, devdoc_DefaultInclusionSettings);

    
    // composición de theDocument, contenedor de la documentación de la vista
    g_theDocument+= g_drivingView.prop('titulo')?           // título
        '# '+g_drivingView.prop('titulo')+'\n': 
        "# "+g_drivingView.name+"\n";
    theTOC=devdoc_toc(0,g_drivingView, 'doc', theTOC);      // contenido
    g_theDocument+="\n"+theTOC+"\n";
    g_theDocument+="\n## Introducción\n";                   // intro
    imageReferencia =                                       // imagen
        g_drivingView_devdoc.replaceAll(" ","").substring(0,g_drivingView_devdoc.length-3);
    if (drivingViewInclusionSettings.IncludeViewElements) {
        if (embed==true){
            var bytes = $.model.renderViewAsBase64(g_drivingView, "PNG", {scale: 2, margin: 10});
            g_theDocument+="\n!["+g_drivingView.name+"](data:image/png;base64,"+bytes+")\n";
        }
        else {
            g_theDocument += (drivingViewInclusionSettings["IncludeDiagram"]===true) ? 
            "\n!["+g_drivingView.name+"]("+ imageReferencia +".png){height=500px}\n":
            "";
        }
    }
    g_drivingView.documentation != "" ?                     // documentación
        g_theDocument+="\n"+g_drivingView.documentation+"\n":
        true;


    // Notes with no relationships
    $(selection).find().not("element")
    .not("relationship").each(function(c){
        if (c.text) {
            if ($(c).rels().length==0) {
                g_theDocument+="\n"+devdoc_escapeMD(c.text).replaceAll("\n","\n> ")+"\n";
            }
        };
    })
    

    // llena la colección de elemntos elements[]
    nestedDocumentation_elements(0, g_drivingView, drivingViewInclusionSettings);

    
    // Crea el archivo de salida de documentación theView
    var exportFile = g_fileName;

    if(exportFile != null) {
       if (!embed) {  // escribe archivo imagen exportFile
            imageURL = exportFile.substring(0,exportFile.length-3).replaceAll(" ","%20")+".png";
            relativeURL = imageURL.split("\\");
            var bytes = $.model.renderViewAsBase64(g_drivingView, "PNG", {scale: 2, margin: 10});
            $.fs.writeFile(exportFile.substring(0,exportFile.length-3) +".png", bytes, "BASE64");
            // g_theDocument+= argRutaCompleta == 'si'? 
            //    '\n['+ imageReferencia+ ']: ' +relativeURL:
            //    '\n['+ imageReferencia+ ']: ' +imageReferencia+'.png';
       }

       g_theDocument+="\n[^1]: Generated: "+ new Date().toLocaleString()+"\n";
       $.fs.writeFile(exportFile, g_theDocument);
       
       console.log("Salidas:");
       console.log(devdoc_addSpace(1), "path: ", g_path);
       console.log(devdoc_addSpace(1), "fileName: ", g_fileName);
       console.log("> Export done");
    }
    else {
         console.log("> Export cancelled");
    }
}
else {
    console.log("> Please Select a View");
}

