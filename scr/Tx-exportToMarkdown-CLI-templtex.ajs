/*
 * Export View to Markdown
 *
 * Requires jArchi - https://www.archimatetool.com/blog/2018/07/02/jarchi/
 *
 * Markdown - https://www.markdownguide.org/
 *
 * Version 2:   Updated to support Diagram Groups
 * Version 2.1: Add check for Selected View
 * Version 2.2: Change to regex, added date of export
 * Version 2.3: Include notes in documentation
 * Version 3:   Updated to include Relationships
 * Version 3.1: Include name and description
 * Version 3.2: Support repeated elements
 * Version 3.3: Fix for relationships table
 * Version 3.4: Fix for connected notes,
 *              Quotes in documentation,
 *              Embed view (experimental)
 * Version 3.5: Added support for jArchi 4.4 (additional attributes)
 * Version 3.6: Linea de comando (CLI)
 * Version 4.0: (interpolación) Documentación por plantillas
 * Version 4.1: Argumento theRutaMacMD
 * Version 4.2: Referencia imagen URL
 * Version 4.2.1: Argumento rutaCompleta
 * Version 4.3: Funciones de librería devdoc
 * Version 4.3.1: Funciones de librería devdoc
 * Version 4.4: Ajuste texto documental (\n---)
 * Version 4.4.1: nestedDocumentation_elements
 * Version 4.4.2: Nueva exportar imagen/rutaTrabajo
 * 
 * (c) 2018 Steven Mileham, HWO
 *
 */

load(__DIR__ + "lib/myargs.js");
load(__DIR__ + "lib/devdocslib.js");
load(__DIR__ + "lib/mustachetemplate.js");


var debug = false;
var embed = false;
var tocMap = [];
var bodyMap = [];
var proptable = false;            // escribe tabla de propiedades?
var reltable = false;             // escribe tabla de relaciones?
var g_path = "";
var g_fileName = "";              // ruta+archivo de salida
var g_drivingView_devdoc = "";    // documento automático asociado a g_drivingView
var g_theDocument = "";
var theTOC = "* [Introducción](#Introducción)";
var elements = '';
var elementsCollection;
var viewDocumentation = '';
var viewTitles =  '';
var viewDiagrams = '';


// funciones con argumento plantillas
var tplDocumentation;   // definido por propiedad 'plantilla' de la vista
var tplViewTitle = _.template(readFully(__DIR__ + 'templates/tex/view-title-md.tpl', 'UTF-8'));
var tplViewDiagram = _.template(readFully(__DIR__ + 'templates/tex/view-diagram-md.tpl', 'UTF-8'));
var tplElement = _.template(readFully(__DIR__ + 'templates/tex/element-md-tex.tpl', 'UTF-8'));


console.show();
console.clear();
console.log("Export to Markdown");


// Argumentos de entrada por CLI
var argRutaMacMD = myargs_getArgumento("rutaMacMD");
var argVistaDocumental = myargs_getArgumento("vistaDocumental");
var argRutaCompleta = myargs_getArgumento("rutaCompleta");
console.log("Entradas: ")
debug? console.log("   theRutaMacMD: "+argRutaMacMD):true;
debug? console.log("   vistaDocumental: "+argVistaDocumental):true;
debug? console.log("   rutaCompleta: "+argRutaCompleta):true;


// Selección de la vista indicada por el argumento entrada CLI
// $(selection).filter("archimate-diagram-model").first();
var g_drivingView = devdoc_useDrivingView(argVistaDocumental);


if (g_drivingView) {
    // Define ruta/nombre del archivo de salida de la documentación de la vista theView
    // var defaultFileName = theView.name ? model.name + "-" + theView.name + ".md" : "Exported View.md"; // Default file name
    // var exportFile = window.promptSaveFile({ title: "Export to Markdown", filterExtensions: [ "*.md" ], fileName: defaultFileName } );
    var archivoruta = rutaTrabajo(g_drivingView, argRutaMacMD);
    g_drivingView_devdoc = archivoruta.devdoc;
    g_fileName = archivoruta.filename;
    g_path = archivoruta.path
    console.log("path: ", g_path);
    console.log("fileName: ", g_fileName);
    (debug)?console.log('exportFile: '+exportFile):true;


    // composición de g_theDocument, contenedor de la documentación de la vista
    g_theDocument+="# "+g_drivingView.name+"\n";
    theTOC=devdoc_toc(0,g_drivingView, 'tex', theTOC);
    g_theDocument+="\n"+theTOC+"\n";
    g_theDocument+="\n## Introducción\n";
    imageReferencia = g_drivingView_devdoc.replaceAll(" ","").substring(0,g_drivingView_devdoc.length-3);
    if (embed==true) {
        var bytes = $.model.renderViewAsBase64(g_drivingView, "PNG", {scale: 2, margin: 10});
        g_theDocument+="\n!["+g_drivingView.name+"](data:image/png;base64,"+bytes+")\n";
    }
    else {
        g_theDocument+="\n!["+g_drivingView.name+"]["+ argRutaCompleta == 'si' ? 
            '\n!['+ imageReferencia+ '](' +relativeURL+ '){height=500 width=}':
            '\n!['+ imageReferencia+ '](' +imageReferencia+'.png){height=500 width=}'+"\n";
    }
    g_drivingView.documentation!=""? g_theDocument+="\n"+g_drivingView.documentation+"\n":true;

    
    // Notes with no relationships
    $(selection).find().not("element")
    .not("relationship").each(function(c){
        if (c.text) {
            if ($(c).rels().length==0) {
                g_theDocument+="\n"+devdoc_escapeMD(c.text).replaceAll("\n","\n> ")+"\n";
            }
        };
    })

    // llena la colección de elementos elements
    nestedDocumentation_elements(0, g_drivingView);
    
    // interpolación de texto mediante plantilla
    tplDocumentation = _.template( readFully(__DIR__ + 'templates/tex/' + 
        (g_drivingView.prop('plantilla')? 
        g_drivingView.prop('plantilla'):
        'documentation-md-tex') + '.tpl', 'UTF-8') ); 
    viewTitles = tplViewTitle({viewId: g_drivingView.id, viewName: _.escape(
        (g_drivingView.prop("titulo")) ? g_drivingView.prop("titulo"): 
        (g_drivingView.labelExpression)? g_drivingView.labelExpression : g_drivingView.name)}
        );
    
    
    // composición de viewDocumentations, contenedor de la documentación de la vista
    viewDocumentation += tplDocumentation ({
        viewId: 'id-'+g_drivingView.id,
        viewTitle: "",  //viewTitles,
        viewNota: devdoc_obtNota (g_drivingView),
        viewDiagram: "",    //viewDiagrams,
        documentationText: _.escape(g_theDocument),
        // documentationMarkdown: marked(_.escape(theView.documentation), mdOptions),
        elements: elements,     // colección elements es alimentada por nestedDocumentation
        relaciones: ""          // relaciones
    });


    // Crea el archivo de salida de documentación theView
    var exportFile = g_fileName;

    if(exportFile != null) {
         if (!embed) {  // escribe archivo imagen exportFile
            imageURL = exportFile.substring(0,exportFile.length-3).replaceAll(" ","%20")+".png";
            devdoc_exportaImagen (g_drivingView, g_path);
            
            //  var bytes = $.model.renderViewAsBase64(theView, "PNG", {scale: 2, margin: 10});
            //  $.fs.writeFile( exportFile.substring(0,exportFile.length-3) +".png", bytes, "BASE64");
            //  viewDocumentations+=argRutaCompleta == 'si'? '\n['+ imageReferencia+ ']: ' +relativeURL:
            //     '\n['+ imageReferencia+ ']: ' +imageReferencia+'.png';
         }
         viewDocumentation+="\n[^1]: Generated: "+ new Date().toLocaleString()+"\n";
         $.fs.writeFile(exportFile, viewDocumentation);

         console.log("Salidas:");
         console.log(devdoc_addSpace(1), "path: ", g_path);
         console.log(devdoc_addSpace(1), "fileName: ", g_fileName);
         console.log("> Export done");
     }
     else {
         console.log("> Export cancelled");
     }
}
else {
    console.log("> Please Select a View");
}


/*
 nestedDocumentation. Exporta documentación de los elementos de una vista
    d: nivel de identación títulos
    element: argumento vista
 Requiere: 
 */
 function nestedDocumentation_elements(d, element) {
    debug? console.log('Elementos: '):true;

    $(element).children().not("relationship").filter(function(child) {
        var prop_destino = child.prop("destino");
        return (prop_destino? (prop_destino.includes("tex")? true:false): false)
    }).each(function(e) {

        if (e.name) {
            var headerDepth ="##";      // nivel inicial jerarquía del título
            for (var i=0; i<d; i++) {
                headerDepth+="#";
            }

            var theHash = devdoc_generateLink(e.name +" ("+ devdoc_convertToText(e.type)+")");
            if (bodyMap[theHash]==null) {
                bodyMap[theHash]=1;
            }
            else {
                bodyMap[theHash]+=1;
            }

            var linkNum="";

            if (bodyMap[theHash]>1) {
                linkNum = " "+bodyMap[theHash];
            }

            elements += tplElement({
                viewsIds: '',
                elementName: _.escape( e.prop('ide')? 
                    e.prop('ide'):
                    e.name.replaceAll(' ','-') ),
                elementType: devdoc_properCase(e.type),
                elementDocumentationText: _.escape(e.documentation).replace(/\n/g, '\n   '),
                elementDocumentationMarkdown: ''
            });

            debug? console.log('   '+e.name+":"+e):true;

            if ($(e).children().length>0) {
                d++;
                nestedDocumentation_elements(d, e);
                d--;
            }
        }
    });
}


// Ruta de trabajo, nombre de archivo
function rutaTrabajo(vista, rutaMacMD = null) {
    // nombre de documento dado por propiedad del modelo
    var r = __DIR__.split("\/");
    var rutaTrabajo = {};

    // nombre del archivo de trabajo (salida)
    var devdoc = vista.prop("devdoc")? 
        vista.prop("devdoc"):
        vista.name.replaceAll(" ", "")+'.md';

    // (sobrescribe) ruta de trabajo dado por argumento CLI
    var path = rutaMacMD? 
        // '/'+r[1]+'/'+r[2]+rutaMacMD+'/':
        // '/'+r[1]+'/'+r[2]+vista.prop("rutaMacMD")+'/';
        rutaMacMD+'/':
        '/'+r[1]+'/'+r[2]+vista.prop("rutaMacMD")+'/';
    var fileName = path+devdoc;


    return {
        'filename' : fileName,
        'path' : path,
        'devdoc' : devdoc
    };
}