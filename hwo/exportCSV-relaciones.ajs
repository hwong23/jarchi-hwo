/*
 * Export To CSV
 *
 * Requires jArchi - https://www.archimatetool.com/blog/2018/07/02/jarchi/
 * Requires PapaParse - https://www.papaparse.com/
 * Works with Import from CSV script - https://gist.github.com/smileham/1e57a5946235e780dee5a824f664aa3d
 *
 * Version 1: Export to CSV
 * Version 1.1: Avoid duplicate concepts exported from diagram
 * Version 1.2: Fix missing properties
 * Version 2: Updated to export Relationships to additional CSV
 * Version 2.1: Added error check for View.
 *
 * (c) 2018 Steven Mileham
 *
 */

var debug = false;
var userPath = "/Users/HWO.work/Documents";

// Show output in the console
console.show();
console.clear();
console.log("> Starting CSV Export: relaciones");

load(__DIR__ + "lib/papaparse.min.js");

var propertiesList = [];

var conceptHashMap = [];

// Set up some conceptHeaders
var conceptHeaders = [
    "Name",
    "Documentation",
    "UID",
    "Type"
];

var relationshipHeaders = [
    "Relationship ID",
    "From ID",
    "From Name",
    "From Type",
    "Relationship Type",
    "To ID",
    "To Name",
    "To Type",
    "Relationship Name",
    "Relationship Documentation"
];

var typeMappings = {
    "access-relationship":"Accesses",
    "composition-relationship":"Comprises",
    "flow-relationship":"Flows",
    "realization-relationship":"Realises",
    "assignment-relationship":"Assigned",
    "serving-relationship":"Serves/Used",
    "association-relationship":"Associated",
    "aggregation-relationship":"Aggregates"
}

var current_row = 1;

var theData = new Array();
var theRelationshipData = new Array();

var theView = $(selection).filter("archimate-diagram-model").first();

$("element").each( function(e) {
    if (e.name!="") {
        getPropiedades(e, conceptHeaders)
    }

    try {
        !debug? console.log("> Nombre "+e.name):true;

        // Get Relationships
        
        $(e).outRels().each(function (r) {
            var theRelationshipRow = new Object;
            theRelationshipRow["Relationship ID"]=r.id;
            theRelationshipRow["From ID"]=r.source.id;
            theRelationshipRow["From Name"]=r.source.name;
                debug? console.log( "> out "+r.source.name+" --> "+r.target.name ):false;
            theRelationshipRow["From Type"]=r.source.type;
            theRelationshipRow["Relationship Type"]=!typeMappings[r.type]?r.type:typeMappings[r.type];
            theRelationshipRow["To ID"]=r.target.id;
            theRelationshipRow["To Name"]=r.target.name;
            theRelationshipRow["To Type"]=r.target.type;
            theRelationshipRow["Relationship Name"]=r.name;
            theRelationshipRow["Relationship Documentation"]=r.documentation;
        
            theRelationshipData.push(theRelationshipRow);
        });

        debug? console.log("> "):false;

        $(e).inRels().each(function (r) {
            var theRelationshipRow = new Object;
            theRelationshipRow["Relationship ID"]=r.id;
            theRelationshipRow["From ID"]=r.target.id;
            theRelationshipRow["From Name"]=r.target.name;
                debug? console.log( "> in "+r.target.name+" --> "+r.target.name ):false;
            theRelationshipRow["From Type"]=r.target.type;
            theRelationshipRow["Relationship Type"]=!typeMappings[r.type]?r.type:typeMappings[r.type];
            theRelationshipRow["To ID"]=r.source.id;
            theRelationshipRow["To Name"]=r.source.name;
            theRelationshipRow["To Type"]=r.source.type;
            theRelationshipRow["Relationship Name"]=r.name;
            theRelationshipRow["Relationship Documentation"]=r.documentation;

            theRelationshipData.push(theRelationshipRow);
        });
        
    }
    catch (error) {
        console.log("> Ignoring: "+e);
    }
});

    // Open a dialog to let the user choose where to save the generated file
    var defaultFileName = model.name ? model.name + ".csv" : "Exported Model.csv"; // Default file name
    // var exportFile = userPath + "/" + defaultFileName;
    var exportFile = window.promptSaveFile({ title: "Export to Markdown", filterExtensions: [ "*.md" ], fileName: defaultFileName } );

    // debug? console.log("> conceptHeaders "+conceptHeaders):true;
    debug? console.log("> TheData "+theRelationshipData.length):true;
    // debug? console.log(theData):true;
    // debug? console.log(theRelationshipData):true;

    var theCSV = Papa.unparse({fields:conceptHeaders, data:theData});
    var theRelationshipsCSV = Papa.unparse({fields:relationshipHeaders, data:theRelationshipData});

    if(exportFile != null) {
        debug? console.log("> TheCSV"):true;
        debug? console.log(theCSV):true;

        // codificacion de caracteres ISO-8859-1: alfabeto latino. Preferido para aplicaciones (ej. Excel). https://es.wikipedia.org/wiki/ISO/IEC_8859-1
        // codificacion de caracteres UTF-8: Unicode variable. Preferido para Web. https://es.wikipedia.org/wiki/UTF-8
        
        // $.fs.writeFile(exportFile, theCSV, "ISO-8859-1");
        $.fs.writeFile(exportFile.substring(0,exportFile.length-4) +"-relationship.csv", theRelationshipsCSV, "ISO-8859-1");
        console.log("> Export done");
    }
    else {
        console.log("> Export cancelled");
    }


// Helper function
function getPropiedades(e, conceptHeaders) {
    if (e.name!="") {
        var theProperties = e.prop();  

        for (var i=0; i<theProperties.length; i++){
            var found = false;
            for (var j=0; j<propertiesList.length; j++) {
                if (propertiesList[j]==theProperties[i]) {
                    found=true;
                }
            }
            if (!found) {
                propertiesList.push(theProperties[i]);
                conceptHeaders.push(theProperties[i]);
            }
        }

        // debug? console.log("prop: "+theProperties):true;

    }
    
    return theProperties;
}
