/*
 * Export View to Markdown
 *
 * Requires jArchi - https://www.archimatetool.com/blog/2018/07/02/jarchi/
 *
 * Markdown - https://www.markdownguide.org/
 *
 * Version 2:   Updated to support Diagram Groups
 * Version 2.1: Add check for Selected View
 * Version 2.2: Change to regex, added date of export
 * Version 2.3: Include notes in documentation
 * Version 3:   Updated to include Relationships
 * Version 3.1: Include name and description
 * Version 3.2: Support repeated elements
 * Version 3.3: Fix for relationships table
 * Version 3.4: Fix for connected notes,
 *              Quotes in documentation,
 *              Embed view (experimental)
 * Version 3.5: Added support for jArchi 4.4 (additional attributes)
 * Version 3.6: Linea de comando (CLI)
 * Version 4.0: (interpolación) Documentación por plantillas
 * Version 4.1: Argumento theRutaMacMD
 * Version 4.2: Referencia imagen URL
 * Version 4.2.1: Argumento rutaCompleta
 * Version 4.3: Funciones de librería devdoc
 * Version 4.3.1: Funciones de librería devdoc
 * Version 4.4: Ajuste texto documental (\n---)
 * Version 4.4.1: nestedDocumentation_elements
 *
 * (c) 2018 Steven Mileham, HWO
 *
 */

load(__DIR__ + "lib/myargs.js");
load(__DIR__ + "lib/devdocslib.js");
load(__DIR__ + "lib/mustachetemplate.js");


var debug = false;
var embed = false;
var tocMap = [];
var bodyMap = [];
var proptable = false;            // escribe tabla de propiedades?
var reltable = false;             // escribe tabla de relaciones?
var g_path = "";
var g_fileName = "";
var g_drivingView_devdoc = "";    // documento automático asociado
var g_theDocument = "";
var theTOC = "* [Introducción](#Introducción)";
var viewElements = '';
var elementsCollection;
var viewDocumentations = '';
var viewTitles =  '';
var viewDiagrams = '';


// funciones con argumento plantillas
var tplDocumentation;   // definido por propiedad 'plantilla' de la vista
var tplViewTitle = _.template(readFully(__DIR__ + 'templates/ppt/view-title-md.tpl', 'UTF-8'));
var tplViewDiagram = _.template(readFully(__DIR__ + 'templates/ppt/view-diagram-md.tpl', 'UTF-8'));
var tplElement = _.template(readFully(__DIR__ + 'templates/ppt/element-md-ppt.tpl', 'UTF-8'));


console.show();
console.clear();
console.log("Export to Markdown");


// Argumentos de entrada por CLI
var argRutaMacMD = myargs_getArgumento("rutaMacMD");
var argVistaDocumental = myargs_getArgumento("vistaDocumental");
var argRutaCompleta = myargs_getArgumento("rutaCompleta");
console.log("Entradas: ")
debug? console.log("   theRutaMacMD: "+argRutaMacMD):true;
debug? console.log("   vistaDocumental: "+argVistaDocumental):true;
debug? console.log("   rutaCompleta: "+argRutaCompleta):true;

// Selección de la vista indicada por el argumento entrada CLI
var g_drivingView = devdoc_useDrivingView(argVistaDocumental);
    // $(selection).filter("archimate-diagram-model").first();


if (g_drivingView) {
    // Define ruta/nombre del archivo de salida de la documentación de la vista theView
    // var defaultFileName = theView.name ? model.name + "-" + theView.name + ".md" : "Exported View.md"; // Default file name
    // var exportFile = window.promptSaveFile({ title: "Export to Markdown", filterExtensions: [ "*.md" ], fileName: defaultFileName } );
    var r = __DIR__.split("\/");
    g_drivingView_devdoc = g_drivingView.prop("devdoc")?g_drivingView.prop("devdoc"):"02n.a1.contenido.md";
    g_path = argRutaMacMD ? 
        '/'+r[1]+'/'+r[2]+argRutaMacMD+'/':
        '/'+r[1]+'/'+r[2]+g_drivingView.prop("rutaMacMD")+'/';
    g_fileName = g_path+g_drivingView_devdoc;

    (debug)?console.log('g_drivingView_devdoc: '+g_drivingView_devdoc):true;
    (debug)?console.log('g_path: '+g_path):true;


    // configuración de presentación de la vista seleccionada
    var drivingViewInclusionSettings = devdoc_getGroupInclusionSettings(g_drivingView, devdoc_DefaultInclusionSettings);


    // composición de theDocument, contenedor de la documentación de la vista
    // g_theDocument+= g_drivingView.prop('titulo')?           // título
    //     '# '+g_drivingView.prop('titulo')+'\n': 
    //     "# "+g_drivingView.name+"\n";
    theTOC=devdoc_toc(0, g_drivingView, 'ppt', theTOC, true, false);      // contenido
    g_theDocument+="\n"+theTOC+"\n";
    g_theDocument+="\n## Introducción\n";                   // intro
    imageReferencia =                                       // imagen
        g_drivingView_devdoc.replaceAll(" ","").substring(0,g_drivingView_devdoc.length-3);
    if (drivingViewInclusionSettings.IncludeViewElements) {
        if (embed==true) {
            var bytes = $.model.renderViewAsBase64(g_drivingView, "PNG", {scale: 2, margin: 10});
            g_theDocument+="\n!["+g_drivingView.name+"](data:image/png;base64,"+bytes+")\n";
        }
        else {
            g_theDocument += (drivingViewInclusionSettings["IncludeDiagram"]===true) ? 
            "\n!["+g_drivingView.name+"]("+ imageReferencia +".png){height=500px}\n":
            "";
        }
    }
    g_drivingView.documentation != "" ?                     // documentación
        g_theDocument+="\n"+g_drivingView.documentation+"\n":
        true;


    // Notes with no relationships
    $(selection).find().not("element")
    .not("relationship").each(function(c){
        if (c.text) {
            if ($(c).rels().length==0) {
                g_theDocument+="\n"+devdoc_escapeMD(c.text).replaceAll("\n","\n> ")+"\n";
            }
        };
    })
    

    // llena la colección de elementos elements
    nestedDocumentation_elements(0, g_drivingView);
    

    // interpolación de texto mediante plantilla
    tplDocumentation = _.template( readFully(__DIR__ + 'templates/ppt/' + 
        (g_drivingView.prop('plantilla')? 
        g_drivingView.prop('plantilla'):
        'documentation-md-ppt') + '.tpl', 'UTF-8') ); 
    viewTitles = tplViewTitle({viewId: g_drivingView.id, viewName: _.escape(
        (g_drivingView.prop("titulo")) ? g_drivingView.prop("titulo"): 
        (g_drivingView.labelExpression)? g_drivingView.labelExpression : g_drivingView.name)}
        );
        

    // composición de viewDocumentations, contenedor de la documentación de la vista
    viewDocumentations += tplDocumentation ({
        viewId: 'id-'+g_drivingView.id,
        viewTitle: viewTitles,
        viewNota: (drivingViewInclusionSettings.IncludeDocumentation) ? 
            devdoc_obtNota (g_drivingView).replace(/\n/g, ' '): 
            "",
        viewDiagram: viewDiagrams,
        documentationText: _.escape(g_theDocument),
        // documentationMarkdown: marked(_.escape(theView.documentation), mdOptions),
        elements: viewElements,     // colección elements es alimentada por nestedDocumentation
        relaciones: ''              // relaciones
    });


    // Crea el archivo de salida de documentación theView
    var exportFile = g_fileName;

    if(exportFile != null) {
        if (!embed) {  // escribe archivo imagen exportFile
           imageURL = exportFile.substring(0,exportFile.length-3).replaceAll(" ","%20")+".png";
           relativeURL = imageURL.split("\\");
           var bytes = $.model.renderViewAsBase64(g_drivingView, "PNG", {scale: 2, margin: 10});
           $.fs.writeFile(exportFile.substring(0,exportFile.length-3) +".png", bytes, "BASE64");
           //  viewDocumentations+=argRutaCompleta == 'si'? '\n['+ imageReferencia+ ']: ' +relativeURL:
           //     '\n['+ imageReferencia+ ']: ' +imageReferencia+'.png';
        }

        viewDocumentations+="\n[^1]: Generated: "+ new Date().toLocaleString()+"\n";
        $.fs.writeFile(exportFile, viewDocumentations);

        console.log("> Export done");
     }
     else {
         console.log("> Export cancelled");
     }
}
else {
    console.log("> Please Select a View");
}


/*
 nestedDocumentation. Exporta documentación de los elementos de una vista
    d: nivel de identación títulos
    element: argumento vista
 Requiere: 
 */
 function nestedDocumentation_elements(d, element) {
     $(element).children().not("relationship").filter(function(child) {
         var prop_destino = child.prop("destino");
         return (prop_destino? (prop_destino.includes("ppt")? true:false): false)
        }).each(function(e) {
            
        if (e.name) {
            var headerDepth ="##";      // nivel inicial jerarquía del título
            for (var i=0; i<d; i++) {
                headerDepth+="#";
            }

            // var theHash = devdoc_generateLink(e.name +" ("+ devdoc_convertToText(e.type)+")");
            // if (bodyMap[theHash]==null) {
            //     bodyMap[theHash]=1;
            // }
            // else {
            //     bodyMap[theHash]+=1;
            // }

            // var linkNum="";

            // if (bodyMap[theHash]>1) {
            //     linkNum = " "+bodyMap[theHash];
            // }

            if (e.documentation ||          // si elemento con documentación
                                            // si elemento sin documentación permitido
                (!e.documentation && inclusionsettings.IncluyeElementosSindoc) ||
                $(e).children().length>0)   // si elemento es un grupo
            {
                viewElements += tplElement({
                    viewsIds: '',
                    elementName: headerDepth +" "+ (e.name),
                    elementType: '',                                        // devdoc_properCase(e.type),
                    elementDocumentationText: _.escape(e.documentation),    //.replace(/\n/g, '\n   '),
                    elementDocumentationMarkdown: ''
                });
            }
            
            (debug)? console.log(devdoc_addSpace(d), e):true;

            if ($(e).children().length>0) {
                d++;
                nestedDocumentation_elements(d, e);
                d--;
            }
        }
    });
}
