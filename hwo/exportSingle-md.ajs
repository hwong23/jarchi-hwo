// Generate Single-page HTML Export
//
// https://github.com/archi-contribs/jarchi-single-page-html-export
//
// Requires jArchi - https://www.archimatetool.com/blog/2018/07/02/jarchi/
//
// This script creates a single HTML page which contains views contained into
// selected folders. This HTML page makes heavy use of CSS tricks to create
// a dynamic web application which doesn't rely on JavaScript.
// This non-JS approach is by design to allow the file to be previewed when
// stored on Onedrive Pro, MsTeams or SharePoint Document Library.
//
// Copyright (c) 2020 Phillip Beauvoir & Jean-Baptiste Sarrodie
//
// Permission is hereby granted, free of charge, to any person
// obtaining a copy of this software and associated documentation
// files (the "Software"), to deal in the Software without
// restriction, including without limitation the rights to use,
// copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the
// Software is furnished to do so, subject to the following
// conditions:
//
// The above copyright notice and this permission notice shall be
// included in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
// EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES
// OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
// NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
// HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,
// WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
// FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
// OTHER DEALINGS IN THE SOFTWARE.

load(__DIR__ + 'libs/nashorn-polyfills.js');
load(__DIR__ + 'libs/underscore-min.js');
load(__DIR__ + 'libs/marked.min.js');
load(__DIR__ + 'lib/myseleccion.js');

console.show();
console.clear();

// Use Mustache.js-style templating
_.templateSettings = {
  interpolate: /\{\{(.+?)\}\}/g
};

// Set Markdown rendering options
var mdOptions = {
  gfm: true,
  breaks: true,
  smartLists: true,
  smartypants: true
};

var roboto = readFully(__DIR__ + 'resources/roboto.css', 'UTF-8');
var icon = readFully(__DIR__ + 'resources/icon.css', 'UTF-8');
var picnic = readFully(__DIR__ + 'resources/picnic-custom.css', 'UTF-8');

var tplMainReport = _.template(readFully(__DIR__ + 'templates/newmain-report.md', 'UTF-8'));
var tplVisibilityRuleBold = _.template(readFully(__DIR__ + 'templates/visibility-rule-bold.tpl', 'UTF-8'));
var tplVisibilityRuleReveal = _.template(readFully(__DIR__ + 'templates/visibility-rule-reveal.tpl', 'UTF-8'));
var tplInputCheckbox = _.template(readFully(__DIR__ + 'templates/input-checkbox.tpl', 'UTF-8'));
var tplTreeView = _.template(readFully(__DIR__ + 'templates/model-tree-view.tpl', 'UTF-8'));
var tplTreeFolder = _.template(readFully(__DIR__ + 'templates/model-tree-folder.tpl', 'UTF-8'));
var tplViewTitle = _.template(readFully(__DIR__ + 'templates/view-title-md.tpl', 'UTF-8'));
var tplViewDiagram = _.template(readFully(__DIR__ + 'templates/view-diagram-md.tpl', 'UTF-8'));
var tplDocumentation = _.template(readFully(__DIR__ + 'templates/documentation-md-dv.tpl', 'UTF-8'));
var tplElementTabla = _.template(readFully(__DIR__ + 'templates/elementtabla-md.tpl', 'UTF-8'));
var tplElement = _.template(readFully(__DIR__ + 'templates/element-md.tpl', 'UTF-8'));
var tplRelationship = _.template(readFully(__DIR__ + 'templates/relationship.tpl', 'UTF-8'));

var visibilityRulesBold = '';
var visibilityRulesReveal = '';
var inputCheckbox = '';
var treeFolder = '';
var treeContent = '';
var viewTitles =  '';
var viewDiagrams = '';
var viewDocumentations = '';
var viewsIdsByConceptId = {};
// var elements = '';
// var elementsCollection;
// var relationships = '';
// var relationshipsCollection;

var allFolders = $('folder');
var viewsFolder = $(model).children().filter('folder.Views');
var viewFolders = viewsFolder.find('folder');
var nonViewFolders = allFolders.not(viewsFolder).not(viewFolders);

var folders = selection.filter("folder").not(nonViewFolders);

if(! folders.size()) {
  folders = viewsFolder;
  console.log("All views have been selected.");
}


// elabora el ruta+nombre archivo con base en propiedades del modelo
// var filePath = window.promptSaveFile({ 
//   title: "Save as HTML file", 
//   filterExtensions : [ "*.html" , "*.*"], 
//   fileName : model.name + ".html" });
var r = __DIR__.split("\/");
var g_path = "/"+r[1]+"/"+r[2] + model.prop("rutaMac");
var g_filePath = g_path + model.name + ".md";
console.log ("Exportado a: " + g_filePath)
if(!g_filePath) {
  console.log('User cancelled.');
  exit();
}

_.chain(folders).sortBy(function(f) { return f.name; }).each(function(f) {
  exportViews(f);
});

function exportaImagen (vv, pth) {
  var bytes = $.model.renderViewAsBase64(vv, "PNG", {
    scale: 1,
    margin: 10
  });

  $.fs.writeFile(pth + "/images/" + vv.name.replaceAll(" ", "") + ".png", 
    bytes, 
    "BASE64"
    );

  return _.escape(vv.name);
}

function exportViews(folder) {
  console.log('Exporting "', folder.name, '"...');
  var previousContent = treeContent;
  treeContent = '';
  _.chain($(folder).children('folder')).sortBy(function(f) { return f.name; }).each(function(f) {
    exportViews(f)
  });

  _.chain($(folder).children('view')).sortBy(function(v) { return v.name; }).each(function(v) {
    // Update lists of elements and relationships
    var viewElements = '';
    var elements = '';
    var elementsCollection;
    var relaciones = '';
    var relacionesCollection;
    $(v).find('element').each(function(e) {
      if(elementsCollection) {
        if(!elementsCollection.contains(e.concept)) elementsCollection.add($(e.concept));
      } else {
        elementsCollection = $(e.concept);
      }
      viewsIdsByConceptId[e.concept.id] += ' id-'+v.id;
    });
    $(v).find('relationship').each(function(r) {
      if(relacionesCollection) {
        if(!relacionesCollection.contains(r.concept)) relacionesCollection.add($(r.concept));
      } else {
        relacionesCollection = $(r.concept);
      }
      viewsIdsByConceptId[r.concept.id] += ' id-'+v.id;
    });
    
    
    _.chain(elementsCollection).sortBy(function(e) { return e.name; }).each(function(e) {
      elements += tplElement({
      viewsIds: viewsIdsByConceptId[e.id],
      elementName: _.escape(e.name),
      elementType: properCase(e.type),
      elementDocumentationText: _.escape(e.documentation).replace(/\n/g, '<br>'),
      elementDocumentationMarkdown: marked(_.escape(e.documentation), mdOptions)
      });
    });
    _.chain(relacionesCollection).sortBy(function(r) { return r.name; }).each(function(r) {
      relaciones += tplRelationship({
      viewsIds: viewsIdsByConceptId[r.id],
      relationshipName: _.escape(r.name),
      relationshipType: properCase(r.type),
      relationshipSource: _.escape(r.source.name),
      relationshipTarget: _.escape(r.target.name),
      relationshipDocumentationText: _.escape(r.documentation).replace(/\n/g, '<br>'),
      relationshipDocumentationMarkdown: marked(_.escape(r.documentation), mdOptions)
      });
    });
    
    // Generate report's fragments
    // treeContent += tplTreeView({viewId: 'id-'+v.id, viewName: _.escape(v.name)});
    // visibilityRulesBold += tplVisibilityRuleBold({viewId: 'id-'+v.id});
    // visibilityRulesReveal += tplVisibilityRuleReveal({viewId: 'id-'+v.id});
    // viewDiagrams += tplViewDiagram({viewId: 'id-'+v.id, viewImage: $.model.renderViewAsBase64(v, "PNG")});
    // var viewNota = obtNota (v);
    var nombrevista = v.name.replaceAll(" ","");
    viewTitles = tplViewTitle({viewId: 'id-'+v.id, viewName: _.escape(v.name)});
    viewDiagrams = tplViewDiagram({viewId: 'id-'+v.id, viewImage: exportaImagen(v, g_path), viewNombre: nombrevista+'.png', viewAncho: ''});
    viewElements = tplElementTabla({viewNombre: nombrevista, filasTabla: elements});
    viewDocumentations += tplDocumentation({
      viewId: 'id-'+v.id,
      viewTitle: viewTitles,
      // viewNota: viewNota,
      viewDiagram: viewDiagrams,
      documentationText: _.escape(v.documentation),  //.replace(/\n/g, '<br>'),
      documentationMarkdown: marked(_.escape(v.documentation), mdOptions),
      elements: viewElements,
      relaciones: relaciones
    });

    // console.log ("documentationMarkdown:\n   " + viewDocumentations);

  }); // chain

  // treeContent = tplTreeFolder({folderId: 'id-'+folder.id, folderName: _.escape(folder.name), folderContent: treeContent});
  // treeContent = previousContent + treeContent;
}


var mainReport = tplMainReport({
  roboto: roboto,
  icon: icon,
  picnic: picnic,
  modelTitle: _.escape(model.name),
  visibilityRulesBold: visibilityRulesBold,
  visibilityRulesReveal: visibilityRulesReveal,
  inputCheckbox: inputCheckbox,
  treeContent: treeContent,
  viewTitles: viewTitles,
  viewDiagrams: viewDiagrams,
  modelPurposeText: _.escape(model.purpose).replace(/\n/g, '<br>'),
  modelPurposeMarkdown: marked(_.escape(model.purpose), mdOptions),
  viewDocumentations: viewDocumentations,
	headerHeight: '60px',
	headerBgColor: '#0074D9',
	headerColor: '#fff',
	mainBgColor: '#fff',
	mainColor: '#000',
	mainMargin: '20px',
	mainHeaderMargin: '35px',
	mainHeaderBgColor: '#eceff1',
	mainHeaderColor: '#546e7a',
	treeMargin: '1.3em'
});

$.fs.writeFile(g_filePath, mainReport, 'UTF-8');

console.log('Export terminated.');

function properCase(str) {
  return str.replace(
    /\w*/g,
    function(txt) {
      return txt.charAt(0).toUpperCase() + txt.substr(1).toLowerCase();
    }
  ).replace('-', ' ');
}
