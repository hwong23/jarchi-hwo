/*
 * Export To CSV
 *
 * Requires jArchi - https://www.archimatetool.com/blog/2018/07/02/jarchi/
 * Requires PapaParse - https://www.papaparse.com/
 * Works with Import from CSV script - https://gist.github.com/smileham/1e57a5946235e780dee5a824f664aa3d
 *
 * Version 1: Export to CSV
 * Version 1.1: Avoid duplicate concepts exported from diagram
 * Version 1.2: Fix missing properties
 * Version 2: Updated to export Relationships to additional CSV
 * Version 2.1: Added error check for View
 * Version 2.2: exportFile = userPath + "/" + defaultFileName
 * Version 2.2.1: $('view').each(function(theView)
 * Version 2.2.2: Variables de configuraciÃ³n
 *
 * (c) 2018 Steven Mileham
 *
 */

// Show output in the console
console.show();
console.clear();
console.log("> Starting CSV Export");

load(__DIR__ + "lib/CSV.exportAllTo-cfg.js.LOCAL");
const Papa = require(__DIR__ + "lib/papaparse.min.js");

var propertiesList = [];

var conceptHashMap = [];

// Set up some conceptHeaders
var conceptHeaders = [
    "Name",
    "Documentation",
    "UID",
    "Type"
];

var relationshipHeaders = [
    "Relationship ID",
    "From ID",
    "From Name",
    "From Type",
    "Relationship Type",
    "To ID",
    "To Name",
    "To Type",
    "Relationship Name",
    "Relationship Documentation"
];

var typeMappingsRelaciones = {
    "access-relationship":"Accesses",
    "composition-relationship":"Comprises",
    "flow-relationship":"Flows",
    "realization-relationship":"Realises",
    "assignment-relationship":"Assigned",
    "serving-relationship":"Serves/Used",
    "association-relationship":"Associated",
    "aggregation-relationship":"Aggregates",
    "influence-relationship":"Influence",
    "specialization-relationship":"Specialize"
}

var typeMappingsElementos = {
    "application-component":"SIS",
    "application-interface":"API",
    "application-service":"SVC",
    "assessment":"Eval",
    "business-actor":"Actor",
    "business-collaboration":"Colab",
    "business-function":"Unidad",
    "business-object":"Dato",
    "business-process":"PROC",
    "business-role":"Rol",
    "business-service":"Servicio",
    "capability":"Cap",
    "constraint":"Restric",
    "course-of-action":"Iniciativa",
    "data-object":"Dato",
    "plateau":"EST",
    "stakeholder":"Interesado",
    "value-stream":"Valor",
    "work-package":"TRAB",
    
}

var current_row = 1;


// variables de configuracion
var incluyePropiedades = cfg_mdOptions.incluyePropiedades;
var userPath = cfg_mdOptions.userPath
var debug = cfg_mdOptions.debug;


$('view').each(function(theView) {
    debug? console.log('debug', theView):true;
    
    var theData = new Array();
    var theRelationshipData = new Array();

    if (theView) {

        // Loop through all elements and set cells to elememt info
        $(theView).find().not("relationship").each(function(e) {

            var theConcept = e.concept;
            try {

                if (e.name!="") {

                    if (cfg_mdOptions.repeticion || !conceptHashMap[theConcept.id]) {
                        conceptHashMap[theConcept.id]=true;

                        var theProperties = theConcept.prop();

                        // Lista de propiedades (prop)
                        for (var i=0; i<theProperties.length; i++){
                            var found = false;
                            for (var j=0; j<propertiesList.length; j++) {
                                if (propertiesList[j]==theProperties[i]) {
                                    found=true;
                                }
                            }
                            if (!found) {
                                propertiesList.push(theProperties[i]);
                                (incluyePropiedades) ? conceptHeaders.push(theProperties[i]): false;
                            }
                        }

                        var theObject = new Object;
                        theObject["Name"]=theConcept.name;
                        theObject["Documentation"]=theConcept.documentation;
                        theObject["UID"]=theConcept.id;
                        theObject["Type"]=!typeMappingsElementos[theConcept.type]? theConcept.type: typeMappingsElementos[theConcept.type];
                        

                        // Valores de las propiedades (prop)
                        if (incluyePropiedades) {
                            for (var i=0; i<propertiesList.length; i++) {
                                if (theConcept.prop(propertiesList[i])) {
                                    theObject[propertiesList[i]]=""+theConcept.prop(propertiesList[i]);
                                }
                            }
                        }
                        
                        debug? console.log("> theObject"):true;
                        debug? console.log(theObject):true;

                        theData.push(theObject);

                        // Get Relationships

                        $(e).outRels().each(function (r) {
                            var theRelationshipRow = new Object;
                            theRelationshipRow["Relationship ID"]=r.id;
                            theRelationshipRow["From ID"]=r.source.id;
                            theRelationshipRow["From Name"]=r.source.name;
                            theRelationshipRow["From Type"]=!typeMappingsElementos[r.source.type]? r.source.type: typeMappingsElementos[r.source.type];
                            theRelationshipRow["Relationship Type"]=!typeMappingsRelaciones[r.type]?r.type:typeMappingsRelaciones[r.type];
                            theRelationshipRow["To ID"]=r.target.id;
                            theRelationshipRow["To Name"]=r.target.name;
                            theRelationshipRow["To Type"]=!typeMappingsElementos[r.target.type]? r.target.type: typeMappingsElementos[r.target.type];
                            theRelationshipRow["Relationship Name"]=r.name;
                            theRelationshipRow["Relationship Documentation"]=r.documentation;

                            theRelationshipData.push(theRelationshipRow);
                        });

                        current_row++;
                    }
                    else {
                        console.log("Duplicate Concept: ",theConcept.name);
                    }
                }
            }
            catch (error) {
                console.log("> Ignoring: "+e);
            }
        });

        // Open a dialog to let the user choose where to save the generated file
        // var exportFile = window.promptSaveFile({ title: "Export to Markdown", filterExtensions: [ "*.csv" ], fileName: defaultFileName } );
        var defaultFileName = model.name ? model.name + "-" + theView.name + ".csv" : "Exported Model.csv"; // Default file name
        var exportFile = userPath + "/" + defaultFileName;


        debug? console.log("> conceptHeaders"+conceptHeaders):true;
        debug? console.log("> TheData"+theData.length):true;
        debug? console.log(theData):true;
        debug? console.log(theRelationshipData):true;

        var theCSV = Papa.unparse({fields:conceptHeaders, data:theData}, {delimiter: ","});
        var theRelationshipsCSV = Papa.unparse({fields:relationshipHeaders, data:theRelationshipData});

        if(exportFile != null) {
            debug? console.log("> TheCSV"):true;
            debug? console.log(theCSV):true;

            // codificacion de caracteres ISO-8859-1: alfabeto latino. Preferido para aplicaciones (ej. Excel). https://es.wikipedia.org/wiki/ISO/IEC_8859-1
            // codificacion de caracteres UTF-8: Unicode variable. Preferido para Web. https://es.wikipedia.org/wiki/UTF-8
            $.fs.writeFile(exportFile, theCSV, "UTF-8");
            $.fs.writeFile(exportFile.substring(0,exportFile.length-4) +"-relationship.csv", theRelationshipsCSV, "UTF-8");
            console.log("> Export done", exportFile);
        }
        else {
            console.log("> Export cancelled");
        }
    }
    else { //if (theView) {
        console.log("> Please Select a View");
    }
});
