/*
 * Export View to Markdown
 *
 * Requires jArchi - https://www.archimatetool.com/blog/2018/07/02/jarchi/
 *
 * Markdown - https://www.markdownguide.org/
 *
 * Version 2:   Updated to support Diagram Groups
 * Version 2.1: Add check for Selected View
 * Version 2.2: Change to regex, added date of export
 * Version 2.3: Include notes in documentation
 * Version 3:   Updated to include Relationships
 * Version 3.1: Include name and description
 * Version 3.2: Support repeated elements
 * Version 3.3: Fix for relationships table
 * Version 3.4: Fix for connected notes,
 *              Quotes in documentation,
 *              Embed view (experimental)
 * Version 3.5: Added support for jArchi 4.4 (additional attributes)
 * Version 3.6: Linea de comando (CLI)
 * Version 4.0: (interpolación) Documentación por plantillas
 * Version 4.1: Argumento theRutaMacMD
 * Version 4.2: Referencia imagen URL
 * Version 4.2.1: Argumento rutaCompleta
 * Version 4.3: Funciones de librería devdoc
 * Version 4.3.1: Funciones de librería devdoc
 * Version 4.4: Ajuste texto documental (\n---)
 *
 * (c) 2018 Steven Mileham, HWO
 *
 */

load(__DIR__ + "lib/myargs.js");
load(__DIR__ + "lib/devdocslib.js");
load(__DIR__ + "lib/mustachetemplate.js");


var debug = false;
var embed = false;
var tocMap = [];
var bodyMap = [];
var proptable = false;            // escribe tabla de propiedades?
var reltable = false;             // escribe tabla de relaciones?
var g_path = "";
var g_fileName = "";
var g_drivingView_devdoc = "";    // documento automático asociado
var theDocument = "";
var theTOC = "* [Introducción](#Introducción)";
var elements = '';
var elementsCollection;
var viewDocumentations = '';


// funciones con argumento plantillas
var tplDocumentation;
var tplMainReport = _.template(readFully(__DIR__ + 'templates/newmain-report-md.tpl', 'UTF-8'));
var tplViewTitle = _.template(readFully(__DIR__ + 'templates/view-title-md.tpl', 'UTF-8'));
var tplViewDiagram = _.template(readFully(__DIR__ + 'templates/view-diagram-md.tpl', 'UTF-8'));
var tplElement = _.template(readFully(__DIR__ + 'templates/tex/element-md-tex.tpl', 'UTF-8'));


console.show();
console.clear();
console.log("Export to Markdown");


/*
 nestedDocumentation. Exporta documentación de los elementos de una vista
    d: nivel de identación títulos
    element: argumento vista
 Requiere: 
 */
function nestedDocumentation(d, element) {
    debug? console.log('Elementos: '):true;

    $(element).children().not("relationship").filter(function(child) {
        var prop_destino = child.prop("destino");
        return (prop_destino? (prop_destino.includes("tex")? true:false): false)
    }).each(function(e) {

        if (e.name) {
            var headerDepth ="##";      // nivel inicial jerarquía del título
            for (var i=0; i<d; i++) {
                headerDepth+="#";
            }

            var theHash = devdoc_generateLink(e.name +" ("+ devdoc_convertToText(e.type)+")");
            if (bodyMap[theHash]==null) {
                bodyMap[theHash]=1;
            }
            else {
                bodyMap[theHash]+=1;
            }

            var linkNum="";

            if (bodyMap[theHash]>1) {
                linkNum = " "+bodyMap[theHash];
            }

                elements += tplElement({
                viewsIds: '',
                elementName: _.escape( e.prop('ide')? e.prop('ide'):e.name ),
                elementType: properCase(e.type),
                elementDocumentationText: _.escape(e.documentation).
                    replace(/\n/g, '\n   '),
                elementDocumentationMarkdown: ''
                });

                debug? console.log('   '+e.name+":"+e):true;

            if ($(e).children().length>0) {
                d++;
                nestedDocumentation(d, e);
                d--;
            }
        }
    });
}


// Argumentos de entrada por CLI
var argRutaMacMD = getArgumento("rutaMacMD");
var argVistaDocumental = getArgumento("vistaDocumental");
var argRutaCompleta = getArgumento("rutaCompleta");
console.log("Entradas: ")
debug? console.log("   theRutaMacMD: "+argRutaMacMD):true;
debug? console.log("   vistaDocumental: "+argVistaDocumental):true;
debug? console.log("   rutaCompleta: "+argRutaCompleta):true;

// Selección de la vista indicada por el argumento entrada CLI
var theView = devdoc_useDrivingView(argVistaDocumental);
    // $(selection).filter("archimate-diagram-model").first();


if (theView) {
    // Define ruta/nombre del archivo de salida de la documentación de la vista theView
        // var defaultFileName = theView.name ? model.name + "-" + theView.name + ".md" : "Exported View.md"; // Default file name
        // var exportFile = window.promptSaveFile({ title: "Export to Markdown", filterExtensions: [ "*.md" ], fileName: defaultFileName } );
        var r = __DIR__.split("\/");
        g_drivingView_devdoc = theView.prop("devdoc")?theView.prop("devdoc"):"02n.a1.contenido.md";
        g_path = argRutaMacMD? 
            '/'+r[1]+'/'+r[2]+argRutaMacMD+'/':
            '/'+r[1]+'/'+r[2]+theView.prop("rutaMacMD")+'/';
        g_fileName = g_path+g_drivingView_devdoc;
    
        (debug)?console.log('g_drivingView_devdoc: '+g_drivingView_devdoc):true;
        (debug)?console.log('g_path: '+g_path):true;


    // composición de theDocument, contenedor de la documentación de la vista
    theDocument+="# "+theView.name+"\n";
    theTOC=devdocs_toc(0,theView, 'tex', theTOC);
    theDocument+="\n"+theTOC+"\n";
    theDocument+="\n## Introducción\n";
    imageReferencia = g_drivingView_devdoc.replaceAll(" ","").substring(0,g_drivingView_devdoc.length-3);
    if (embed==true){
        var bytes = $.model.renderViewAsBase64(theView, "PNG", {scale: 2, margin: 10});
        theDocument+="\n!["+theView.name+"](data:image/png;base64,"+bytes+")\n";
    }
    else {theDocument+="\n!["+theView.name+"]["+ imageReferencia +"]\n";}
    theView.documentation!=""? theDocument+="\n"+theView.documentation+"\n":true;

    
    // Notes with no relationships
    $(selection).find().not("element")
    .not("relationship").each(function(c){
        if (c.text) {
            if ($(c).rels().length==0) {
                theDocument+="\n"+devdoc_escapeMD(c.text).replaceAll("\n","\n> ")+"\n";
            }
        };
    })

    
    nestedDocumentation(0, theView);
    
    // interpolación de texto mediante plantilla
    var tplDocumentation = _.template( readFully(__DIR__ + 'templates/' + 
        (theView.prop('plantilla')? theView.prop('plantilla'):'tex/documentation-md-tex') + '.tpl', 'UTF-8') ); 
    
    viewDocumentations += tplDocumentation (
        {
        viewId: 'id-'+theView.id,
        viewTitle: "",      // viewTitles,
        viewNota: devdocs_obtNota (theView),
        viewDiagram: "",    // viewDiagrams,
        documentationText: _.escape(theDocument)
        ,
        // documentationMarkdown: marked(_.escape(theView.documentation), mdOptions),
        elements: elements,
        relaciones: ""      // relaciones
        }
    );


    
    // Crea el archivo de salida de documentación theView
    var exportFile = g_fileName;

    if(exportFile != null) {
         if (!embed) {  // escribe archivo imagen exportFile
             imageURL = exportFile.substring(0,exportFile.length-3).replaceAll(" ","%20")+".png";
             relativeURL = imageURL.split("\\");
             var bytes = $.model.renderViewAsBase64(theView, "PNG", {scale: 2, margin: 10});
             $.fs.writeFile(exportFile.substring(0,exportFile.length-3) +".png", bytes, "BASE64");
             viewDocumentations+=argRutaCompleta == 'si'? '\n['+ imageReferencia+ ']: ' +relativeURL:
                '\n['+ imageReferencia+ ']: ' +imageReferencia+'.png';
         }
         viewDocumentations+="\n[^1]: Generated: "+ new Date().toLocaleString()+"\n";
         $.fs.writeFile(exportFile, viewDocumentations);

         console.log("> Export done");
     }
     else {
         console.log("> Export cancelled");
     }
}
else {
    console.log("> Please Select a View");
}


function properCase(str) {
    return str.replace(
      /\w*/g,
      function(txt) {
        return txt.charAt(0).toUpperCase() + txt.substr(1).toLowerCase();
      }
    ).replace('-', ' ');
  }
  
